/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Shasani
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class addprescription extends javax.swing.JFrame {

    /**
     * Creates new form addprescription
     */
    public addprescription() {
        initComponents();
        connect();
        loadtable();
        loadpatienttable();
        loadmedtable();
        LocalDate currentDate = LocalDate.now();
        txtPdate.setText(currentDate.toString());
    }

    public void connect(){
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
}

    public void loadtable(){
    try {
            Connection conn =DriverManager.getConnection("jdbc:mysql://localhost/pharmacydb","root","");
            PreparedStatement pst = conn.prepareStatement("SELECT * FROM prescription");
            ResultSet rs = pst.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tblprescription.getModel();
            model.setRowCount(0);

            // Set column names
            model.setColumnIdentifiers(new Object[]{"Prescription ID", "Patient ID", "Medicine ID","M_Name","Doc Name","Dosage","prescribed Qty","Prescribed Date"});

            while (rs.next()) {
                model.addRow(new Object[]{rs.getInt("Pre"), rs.getInt("PID"), rs.getInt("MID"),rs.getString("M_Name") ,rs.getString("Doc_Name"),
                                            rs.getInt("Dosage"),rs.getInt("Qty"),rs.getString("Pre_date")});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

}
    public void loadpatienttable(){
    try {
            Connection conn =DriverManager.getConnection("jdbc:mysql://localhost/pharmacydb","root","");
            PreparedStatement pst = conn.prepareStatement("SELECT * FROM patient");
            ResultSet rs = pst.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tblpatient.getModel();
            model.setRowCount(0);

            // Set column names
            model.setColumnIdentifiers(new Object[]{"Patient ID","Patient Name","Age","Address","Contact","Register Date"});

            while (rs.next()) {
                model.addRow(new Object[]{ rs.getInt("PID"), rs.getString("Name"),rs.getInt("Age"),
                                            rs.getString("Address"),rs.getString("ContactNO"),rs.getString("R_date")});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

}
    public void loadmedtable(){
    try {
            Connection conn =DriverManager.getConnection("jdbc:mysql://localhost/pharmacydb","root","");
            PreparedStatement pst = conn.prepareStatement("SELECT * FROM inventory");
            ResultSet rs = pst.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tblinventory.getModel();
            model.setRowCount(0);

            // Set column names
            model.setColumnIdentifiers(new Object[]{"Medicine ID","Med Name","Quantity","Expire Date"});

            while (rs.next()) {
                model.addRow(new Object[]{ rs.getInt("MID"), rs.getString("M_Name"),rs.getInt("Quantity"),rs.getString("E_Date")});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtDname = new javax.swing.JTextField();
        txtMedName = new javax.swing.JTextField();
        txtDosage = new javax.swing.JTextField();
        txtPqty = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPreid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPid = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtMid = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtPdate = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblinventory = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblpatient = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblprescription = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        dashboard = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Prescription ID");

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnSearch.setText("SEARCH");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(35, 35, 35))
        );

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Doctor Name");

        btnAdd.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Dosage");

        btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Prescribed Quantity");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Medicine Name");

        txtDname.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtMedName.setEditable(false);
        txtMedName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMedName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedNameActionPerformed(evt);
            }
        });

        txtDosage.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtPqty.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Prescription ID");

        txtPreid.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Patient ID");

        txtPid.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Medicine ID");

        txtMid.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Prescribed Date");

        txtPdate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Prescription Details");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Patient Details");

        tblinventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblinventory);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Medication Details");

        jLabel14.setText("(*required to search before update & delete)");

        tblpatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblpatient);

        tblprescription.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblprescription);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Prescriptions ");

        dashboard.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        dashboard.setText("Dashboard");
        dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDname)
                            .addComponent(txtPid)
                            .addComponent(txtPreid, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(txtPdate, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtPqty, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDosage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtMid, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtMedName, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnUpdate)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(15, 15, 15))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(dashboard)
                                .addGap(51, 51, 51))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtMid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)
                                .addComponent(jLabel13))
                            .addComponent(txtMedName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(btnUpdate))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDosage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPqty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(dashboard))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPreid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(53, 53, 53))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete)
                                .addGap(83, 83, 83)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        String Pre = txtSearch.getText();
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/pharmacydb", "root", "")) {
            String query = "SELECT p.Pre, p.PID, p.MID, i.M_Name, p.Doc_Name, p.Dosage, p.Qty, p.Pre_Date " +
            "FROM prescription p " +
            "JOIN inventory i ON p.MID = i.MID " +
            "WHERE p.Pre = ?";
            PreparedStatement pst = conn.prepareStatement(query);
            pst.setString(1, Pre);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtPreid.setText(String.valueOf(rs.getInt("Pre")));
                txtPid.setText(String.valueOf(rs.getInt("PID")));
                txtMid.setText(String.valueOf(rs.getInt("MID")));
                txtMedName.setText(rs.getString("M_Name"));
                txtDname.setText(rs.getString("Doc_Name"));
                txtDosage.setText(String.valueOf(rs.getInt("Dosage"))); // Convert int to String
                txtPqty.setText(String.valueOf(rs.getInt("Qty")));
                txtPdate.setText(rs.getString("Pre_Date"));

                txtSearch.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "No Record Found");
            }

            // Close resources
            rs.close();
            pst.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String preID = txtPreid.getText();
        String patientID = txtPid.getText();
        String medID = txtMid.getText();
        String docName = txtDname.getText();
        String dosage = txtDosage.getText();
        String qty = txtPqty.getText();
        String preDate = txtPdate.getText();

        if (patientID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please search for a prescription record before updating.");
            return;
        }

        try {
            int parsedQty = Integer.parseInt(qty);
            if (parsedQty < 0) {
                JOptionPane.showMessageDialog(this, "Please enter a valid positive quantity.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid numeric quantity.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String medicineName = "";
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/pharmacydb", "root", "")) {

            // Fetch previous prescribed quantity
            String fetchPrescriptionQuery = "SELECT Qty FROM prescription WHERE Pre = ?";
            PreparedStatement pstFetchPrescription = conn.prepareStatement(fetchPrescriptionQuery);
            pstFetchPrescription.setInt(1, Integer.parseInt(preID));
            ResultSet rsPrescription = pstFetchPrescription.executeQuery();

            int previousQty = 0;
            if (rsPrescription.next()) {
                previousQty = rsPrescription.getInt("Qty");
            }
            rsPrescription.close();
            pstFetchPrescription.close();

            // Calculate quantity difference
            int newQty = Integer.parseInt(qty);
            int quantityDifference = newQty - previousQty;

            // Fetch medicine name and available quantity from inventory
            String fetchMedicineNameQuery = "SELECT M_Name, A_Qty FROM inventory WHERE MID = ?";
            PreparedStatement pstFetch = conn.prepareStatement(fetchMedicineNameQuery);
            pstFetch.setInt(1, Integer.parseInt(medID));
            ResultSet rsInventory = pstFetch.executeQuery();

            int availableQty = 0;
            if (rsInventory.next()) {
                medicineName = rsInventory.getString("M_Name");
                availableQty = rsInventory.getInt("A_Qty");
            } else {
                JOptionPane.showMessageDialog(this, "Medicine ID not found in inventory.", "Error", JOptionPane.WARNING_MESSAGE);
                rsInventory.close();
                pstFetch.close();
                return;
            }
            rsInventory.close();
            pstFetch.close();

            // Update inventory available quantity
            int updatedAvailableQty = availableQty - quantityDifference;
            String updateInventoryQuery = "UPDATE inventory SET A_Qty = ? WHERE MID = ?";
            PreparedStatement pstUpdateInventory = conn.prepareStatement(updateInventoryQuery);
            pstUpdateInventory.setInt(1, updatedAvailableQty);
            pstUpdateInventory.setInt(2, Integer.parseInt(medID));

            int inventoryUpdateStatus = pstUpdateInventory.executeUpdate();
            pstUpdateInventory.close();

            if (inventoryUpdateStatus > 0) {
                // Update prescription record
                String updatePrescriptionQuery = "UPDATE prescription SET PID = ?, MID = ?, M_Name = ?, Doc_Name = ?, Dosage = ?, Qty = ?, Pre_Date = ? WHERE Pre = ?";
                PreparedStatement pstUpdatePrescription = conn.prepareStatement(updatePrescriptionQuery);

                pstUpdatePrescription.setInt(1, Integer.parseInt(patientID));
                pstUpdatePrescription.setInt(2, Integer.parseInt(medID));
                pstUpdatePrescription.setString(3, medicineName);
                pstUpdatePrescription.setString(4, docName);
                pstUpdatePrescription.setInt(5, Integer.parseInt(dosage));
                pstUpdatePrescription.setInt(6, newQty);
                pstUpdatePrescription.setDate(7, java.sql.Date.valueOf(preDate));
                pstUpdatePrescription.setInt(8, Integer.parseInt(preID));

                int updatedRows = pstUpdatePrescription.executeUpdate();
                pstUpdatePrescription.close();

                if (updatedRows > 0) {
                    JOptionPane.showMessageDialog(this, "Prescription updated successfully.");

                    // Clear fields
                    txtPreid.setText("");
                    txtPid.setText("");
                    txtMid.setText("");
                    txtMedName.setText("");
                    txtDname.setText("");
                    txtDosage.setText("");
                    txtPqty.setText("");
                    txtPdate.setText("");
                    loadtable();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update prescription. Please try again.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update inventory. Please check inventory records.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating prescription: " + e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        String preID = txtPreid.getText();
        String patientID = txtPid.getText();
        String medID = txtMid.getText();
        String docName = txtDname.getText();
        String dosage = txtDosage.getText();
        String qty = txtPqty.getText();
        String preDate = txtPdate.getText();

        if (preID.isEmpty() || patientID.isEmpty() || medID.isEmpty() ||
            docName.isEmpty() || dosage.isEmpty() || qty.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields.");
            return;
        }

        try {
            int parsedQty = Integer.parseInt(qty);
            if (parsedQty < 0) {
                JOptionPane.showMessageDialog(this, "Please enter a valid positive quantity.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid numeric quantity.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String medicineName = "";
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/pharmacydb", "root", "")) {

            // Fetch medicine name and available quantity from inventory
            String fetchMedicineQuery = "SELECT M_Name, A_Qty FROM inventory WHERE MID = ?";
            PreparedStatement pstFetchMed = conn.prepareStatement(fetchMedicineQuery);
            pstFetchMed.setInt(1, Integer.parseInt(medID));

            ResultSet rsInventory = pstFetchMed.executeQuery();
            int availableQty = 0;
            if (rsInventory.next()) {
                medicineName = rsInventory.getString("M_Name");
                availableQty = rsInventory.getInt("A_Qty");
                txtMedName.setText(medicineName); // Assuming txtMedName is the field for Medicine Name
            } else {
                JOptionPane.showMessageDialog(this, "Medicine ID not found in inventory.");
                txtMedName.setText("");
                return; // Stop if Medicine ID is invalid
            }
            rsInventory.close();
            pstFetchMed.close();

            // Check if there is enough quantity available in the inventory
            int newQty = Integer.parseInt(qty);
            if (newQty > availableQty) {
                JOptionPane.showMessageDialog(this, "Insufficient quantity in inventory.", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Update inventory available quantity
            int updatedAvailableQty = availableQty - newQty;
            String updateInventoryQuery = "UPDATE inventory SET A_Qty = ? WHERE MID = ?";
            PreparedStatement pstUpdateInventory = conn.prepareStatement(updateInventoryQuery);
            pstUpdateInventory.setInt(1, updatedAvailableQty);
            pstUpdateInventory.setInt(2, Integer.parseInt(medID));

            int inventoryUpdateStatus = pstUpdateInventory.executeUpdate();
            pstUpdateInventory.close();

            if (inventoryUpdateStatus > 0) {
                // Insert new prescription record
                String insertPrescriptionQuery = "INSERT INTO prescription (Pre, PID, MID, M_Name, Doc_Name, Dosage, Qty, Pre_Date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement pstInsertPrescription = conn.prepareStatement(insertPrescriptionQuery);

                pstInsertPrescription.setInt(1, Integer.parseInt(preID));
                pstInsertPrescription.setInt(2, Integer.parseInt(patientID));
                pstInsertPrescription.setInt(3, Integer.parseInt(medID));
                pstInsertPrescription.setString(4, medicineName);
                pstInsertPrescription.setString(5, docName);
                pstInsertPrescription.setInt(6, Integer.parseInt(dosage));
                pstInsertPrescription.setInt(7, newQty);
                pstInsertPrescription.setDate(8, java.sql.Date.valueOf(preDate));

                int addedRows = pstInsertPrescription.executeUpdate();
                pstInsertPrescription.close();

                if (addedRows > 0) {
                    JOptionPane.showMessageDialog(this, "Prescription added successfully.");

                    // Clear fields
                    txtPreid.setText("");
                    txtPid.setText("");
                    txtMid.setText("");
                    txtMedName.setText("");
                    txtDname.setText("");
                    txtDosage.setText("");
                    txtPqty.setText("");
                    txtPdate.setText("");
                    loadtable();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to add prescription. Please try again.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update inventory. Please check inventory records.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error adding prescription: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Ensure a prescription record is loaded by checking Prescription ID field
        String preID = txtPreid.getText();
        if (preID.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Please search and load a prescription record before attempting to delete.");
            return;
        }

        // Show confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this prescription?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        // Proceed with delete
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/pharmacydb", "root", "");
            PreparedStatement pst = conn.prepareStatement("DELETE FROM prescription WHERE Pre = ?")) {

            pst.setInt(1, Integer.parseInt(preID)); // Set the Prescription ID for deletion
            int result = pst.executeUpdate();

            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Prescription Deleted Successfully");

                // Clear fields after deletion
                txtPreid.setText("");
                txtPid.setText("");
                txtMid.setText("");
                txtDname.setText("");
                txtDosage.setText("");
                txtPqty.setText("");
                txtPdate.setText("");

                loadtable(); // Reload data in the table
            } else {
                JOptionPane.showMessageDialog(this, "Prescription ID not found");
            }
        }
        catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deleting prescription: " + ex.getMessage());
        }
        catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid prescription ID format. Please enter a numeric ID.", "Input Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtMedNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMedNameActionPerformed

    private void dashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardActionPerformed
        this.hide();
        dashboard dashboard=new dashboard();
        dashboard.setVisible(true);
    }//GEN-LAST:event_dashboardActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addprescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addprescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addprescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addprescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addprescription().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton dashboard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblinventory;
    private javax.swing.JTable tblpatient;
    private javax.swing.JTable tblprescription;
    private javax.swing.JTextField txtDname;
    private javax.swing.JTextField txtDosage;
    private javax.swing.JTextField txtMedName;
    private javax.swing.JTextField txtMid;
    private javax.swing.JTextField txtPdate;
    private javax.swing.JTextField txtPid;
    private javax.swing.JTextField txtPqty;
    private javax.swing.JTextField txtPreid;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
